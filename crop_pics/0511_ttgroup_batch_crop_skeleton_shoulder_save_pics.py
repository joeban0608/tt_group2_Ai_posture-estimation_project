# -*- coding: utf-8 -*-
"""0511_ttgroup_project_skeleton_cut_shoulder_save_pics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ih8jJu0tPyeEdw8kCbsQMp1ulKUhfqY4

# **尚未使用**
"""

"""# **資料預處理**"""

# from zipfile import ZipFile
# path = "/content/drive/MyDrive/ttgroup/cut_shoulder_skeleton_pics.zip"
# f = ZipFile(path)
# # f.extractall() 小括號是直接解壓縮在同一層
# f.extractall()
#
# #記得掛載雲端硬碟
# from zipfile import ZipFile
# path = r"D:\tt_group_total_pics\0511_0_5144\0511_out_resize256x256_0_5144_skeleton"
# f = ZipFile(path)
# # f.extractall() 小括號是直接解壓縮在同一層
# f.extractall()

# 製作igm_name的list
import glob
import pandas as pd
import numpy as np

# sorted() : 排序所有可跌代對象
# split() : 分割()
fn_dic = {"img_name":[]}
paths = sorted(glob.glob("0511_out_resize256x256_0_5144_skeleton/*"))
for path in paths:
  fn = path.split("/")[-1].split(".")[0].split("\\")[1]
  fn_dic["img_name"].append(fn)
fn_dic_df = pd.DataFrame(fn_dic)

# create keypoints_36_combine_df
import json, codecs
import numpy as np
columns ={
     "coco_col":['Nose_x', 'Nose_y', 'Neck_x', 'Neck_y',
           'R-Sho_x', 'R-Sho_y', 'R-Elb_x', 'R-Elb_y',
           'R-Wr_x', 'R-Wr_y', 'L-Sho_x', 'L-Sho_y',
           'L-Elb_x', 'L-Elb_y', 'L-Wr_x', 'L-Wr_y',
           'R-Hip_x', 'R-Hip_y', 'R-Knee_x', 'R-Knee_y',
           'R-Ank_x', 'R-Ank_y', 'L-Hip_x', 'L-Hip_y',
           'L-Knee_x', 'L-Knee_y', 'L-Ank_x', 'L-Ank_y',
           'R-Eye_x', 'R-Eye_y', 'L-Eye_x', 'L-Eye_y',
           'R-Ear_x', 'R-Ear_y', 'L-Ear_x', 'L-Ear_y']
    }
fn_list = fn_dic["img_name"]
# print(fn_list) 印0004, 0006...

# 運用globals()[] 全域變數：做成動態的變數名。
n_fn_list = []
for fn in fn_list:
  # print(fn)
  obj_text = codecs.open("0511_out_resize256x256_0_5144_json/"+ fn + ".json", 'r', encoding='utf-8').read()
  b_new = json.loads(obj_text)
  a_new = np.array(b_new)
  a_new = a_new.reshape(1,36)
  # print(a_new)
  globals()["key_point_36"+ fn +"_df"] = pd.DataFrame(a_new, columns = columns["coco_col"])
  # print(globals()["key_point_36"+ fn +"_df"])
  n_fn_list.append(globals()["key_point_36"+ fn +"_df"])
# print(n_fn_list)

# pd.concat([key_point_36_0004_df, key_point_36_0006_df, key_point_36_0008_df])
key_point_36_combine_df = pd.concat(n_fn_list, ignore_index=True)

# # nose + shouder
# shoulder_columns_list = ['Nose_x', 'Nose_y', 'R-Sho_x', 'R-Sho_y', 'L-Sho_x', 'L-Sho_y']
# key_point_36_combine_cut_shoulder_df = key_point_36_combine_df[shoulder_columns_list]
# # print(key_point_36_combine_cut_shoulder_df)

# shoulder
shoulder_columns_list = ['R-Sho_x', 'R-Sho_y', 'L-Sho_x', 'L-Sho_y']
key_point_36_combine_cut_shoulder_df = key_point_36_combine_df[shoulder_columns_list]
# key_point_36_combine_cut_shoulder_df


# save_pics
import os
from PIL import Image
import matplotlib.pyplot as plt
fn_list = fn_dic["img_name"]

base = "D:/tt_group_total_pics/0511_0_5144/0512_crop_shoulder_save_pics/"
if not os.path.exists(base):
    os.makedirs(base)
# # crop nose + shoulder
# for i, fn in enumerate(fn_list):
#   img = Image.open("0511_out_resize256x256_0_5144_skeleton/" + fn + ".jpg").convert("RGB")

#   x1 = int(key_point_36_combine_cut_shoulder_df[i:i+1]["R-Sho_x"])
#   x2 = int(key_point_36_combine_cut_shoulder_df[i:i+1]["L-Sho_x"])
#   x3 = int(key_point_36_combine_cut_shoulder_df[i:i+1]["Nose_x"])
#   left = min(x1, x2, x3)-10 #left
#   right = max(x1, x2, x3) +10 #right

#   y1 = int(key_point_36_combine_cut_shoulder_df[i:i+1]["R-Sho_y"])
#   y2 = int(key_point_36_combine_cut_shoulder_df[i:i+1]["L-Sho_y"])
#   y3 = int(key_point_36_combine_cut_shoulder_df[i:i+1]["Nose_y"])
#   top = min(y1, y2, y3) - 10#top
#   bottom = max(y1, y2, y3) + 10#bottom
#   # print(top, left, right, bottom)
#   img_crop = img.crop((left, top, right, bottom))
#   plt.imshow(img_crop)
#   img_crop.save(base  +fn_list[i]+ ".jpg")

# crop shoulder
for i, fn in enumerate(fn_list):
    img = Image.open("0511_out_resize256x256_0_5144_skeleton/" + fn + ".jpg").convert("RGB")

    x1 = int(key_point_36_combine_cut_shoulder_df[i:i + 1]["R-Sho_x"])
    x2 = int(key_point_36_combine_cut_shoulder_df[i:i + 1]["L-Sho_x"])
    left = x1 - 10  # left
    right = x2 + 10  # right

    y1 = int(key_point_36_combine_cut_shoulder_df[i:i + 1]["R-Sho_y"])
    y2 = int(key_point_36_combine_cut_shoulder_df[i:i + 1]["L-Sho_y"])
    top = min(y1, y2) - 10  # top
    bottom = max(y1, y2) + 10  # bottom
    # print(top, left, right, bottom)
    img_crop = img.crop((left, top, right, bottom))
    img_crop.save(base +fn_list[i]+ ".jpg")
print("save_finsh")
